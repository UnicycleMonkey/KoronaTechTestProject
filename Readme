Тестовое задание для курса по java

Описание задачи: утилита фильтрации содержимого файлов.

При запуске утилиты в командной строке подается несколько файлов, содержащих вперемешку целые числа,
строки и вещественные числа. В качестве разделителя используется перевод строки. Строки из файлов
читаются по очереди в соответствии с их перечислением в командной строке.
Задача утилиты записать разные типы данных в разные файлы. Целые числа в один выходной файл, вещественные
в другой, строки в третий, значения записываются по порядку их прочтения из файла. По умолчанию файлы
с результатами располагаются в текущей папке с именами integers.txt, floats.txt, strings.txt.
Дополнительно с помощью опции
-o нужно уметь задавать путь для результатов. Опция -p задает префикс имен выходных файлов.
Например -o /some/path -p result_ задают вывод в файлы
/some/path/result_integers.txt, /some/path/result_strings.txt и т.д. По умолчанию файлы
результатов перезаписываются. Если добавлена опция -a, то новые результаты добавляются в файлы
с предыдущими. Файлы с результатами должны создаваться по мере необходимости. Если какого-то типа
данных во входящих файлах нет, то и создавать исходящий файл, который будет заведомо пустым, не нужно.
В процессе фильтрации данных необходимо собирать статистику по каждому типу данных. Статистика должна
поддерживаться двух видов: краткая или полная. Выбор статистики производится опциями -s или
-f соответственно. Краткая статистика содержит только количество элементов записанных в исходящие файлы.
Полная статистика для чисел дополнительно содержит минимальное и максимальное значения, сумма и среднее.
Полная статистика для строк, помимо их количества, содержит также размер самой
короткой строки и самой длинной. Статистику по каждому типу отфильтрованных данных утилита должна
вывести в консоль. Все возможные виды ошибок должны быть обработаны. Программа не должна «падать».
Если после ошибки продолжить выполнение невозможно, программа должна сообщить об этом пользователю
с указанием причины неудачи. Частичная обработка при наличии ошибок более предпочтительна чем
остановка программы. Код программы должен быть читаемым и хорошо структурированным.
